Faculteit Bedrijf en Organisatie

Wanneer is EventSourcing een meerwaarde voor een bedrijf zoals Skedify, waar ze gespecialiseerd zijn in
online scheduling?

Robin Malfait

Scriptie voorgedragen tot het bekomen van de graad van
professionele bachelor in de toegepaste informatica

Promotor:
Lieven Smits
Co-promotor:
Mathias Verraes

Instelling: —
Academiejaar: 2016-2017
Tweede examenperiode

Faculteit Bedrijf en Organisatie

Wanneer is EventSourcing een meerwaarde voor een bedrijf zoals Skedify, waar ze gespecialiseerd zijn in
online scheduling?

Robin Malfait

Scriptie voorgedragen tot het bekomen van de graad van
professionele bachelor in de toegepaste informatica

Promotor:
Lieven Smits
Co-promotor:
Mathias Verraes

Instelling: —
Academiejaar: 2016-2017
Tweede examenperiode

Samenvatting

De maatschappij waarin we leven draait om data. Data en informatie zijn zeer veel geld
waard, daarom is het belangrijk dat er goed mee om wordt gegaan. In veel systemen
waar relationele modellen gebruikt worden gaat er data verloren. Telkens wanneer er een
UPDATE of DELETE sql statement wordt uitgevoerd is deze informatie er niet meer. Door
middel van EventSourcing gaat er geen data verloren. Het is belangrijk om informatie bij
te houden, dit kan altijd interessant zijn in de toekomst wanneer er specifieke business
vragen komen waar er momenteel nog geen antwoord op is. Eerst wordt er gegekeken naar
al de delen die deel uitmaken van een EventSourced applicatie. Dit gaat van CQS, CQRS
tot de effectieve onderdelen van EventSourcing. Er wordt ook uitleg gegeven over Skedify
zodat de concrete businesscase duidelijk gescoped wordt.

Voorwoord

Ik ben al een lange tijd gepassioneerd door data en informatie. Door gebruik te maken van
EventSourcing gaat er geen informatie verloren, en is er een mogelijkheid om te tijdreizen
naar het verloren tot op het heden. Het idee van deze bachelorproef kwam uit gesprekken
met een aantal mensen via sociale media Twitter.
Dankzij Twitter heb ik ook mijn co-promotor, Mathias Verraes leren kennen en ik zou hem
heel graag willen bedanken voor het realiseren van deze bachelorproef. Ik kon altijd met
al mijn vragen raad bij hem, en hij zorgde er ook voor dat ik naar Meetups kon gaan om
meer informatie te verschaffen voor mijn bachelorproef.
Daarnaast zou ik ook graag mijn promotor, Lieven Smits willen bedanken voor het benadrukken van mijn spellingsfouten en deze bachelorproef tot een goed einde te brengen.

Inhoudsopgave

1

Inleiding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

1.1

Stand van zaken

9

1.2

Probleemstelling en Onderzoeksvragen

9

1.3

Opzet van deze bachelorproef

2

Methodologie . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11

2.1

Literatuurstudie

11

2.2

Proof of concept

11

3

Skedify . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

4

CQRS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15

5

EventSourcing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17

5.1

Aggregates

10

17

5.2

Domain Events

17

5.3

Invariants

18

5.4

Eventual Consistency

18

5.5

Audit Log

18

5.6

Projections

18

6

Conclusie . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
Bibliografie . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19

1. Inleiding

De inleiding moet de lezer alle nodige informatie verschaffen om het onderwerp te begrijpen zonder nog externe werken te moeten raadplegen (Pollefliet2011). Dit is een
doorlopende tekst die gebaseerd is op al wat je over het onderwerp gelezen hebt (literatuuronderzoek).
Je verwijst bij elke bewering die je doet, vakterm die je introduceert, enz. naar je bronnen.
In LATEX kan dat met het commando \textcite{} of \autocite{}. Als argument van
het commando geef je de “sleutel” van een “record” in een bibliografische databank in
het BibTEX-formaat (een tekstbestand). Als je expliciet naar de auteur verwijst in de zin,
gebruik je \textcite{}. Soms wil je de auteur niet expliciet vernoemen, dan gebruik je
\autocite{}. Hieronder een voorbeeld van elk.
Knuth1998 schreef een van de standaardwerken over sorteer- en zoekalgoritmen. Experten
zijn het erover eens dat cloud computing een interessante opportuniteit vormen, zowel voor
gebruikers als voor dienstverleners op vlak van informatietechnologie (Creeger2009).

1.1

Stand van zaken

1.2

Probleemstelling en Onderzoeksvragen
Data is belangrijk, rapportering is belangrijk. Voorspellen van vragen die de business kan
vragen binnen dit en 5 jaar is onmogelijk. Daarom is het belangrijk om alle informatie
bij te houden om hier interessante rapportering op te kunnen uitvoeren. In een systeem
met een standaard relationele databank wordt niet alle informatie bijgehouden. Bij het

Hoofdstuk 1. Inleiding

10

verwijderen of wijzigen van informatie is de voorgaande informatie verloreren gegaan.
Alle informatie bijhouden is dus interessant, maar wat zijn hier de voor en nadelen van?
De onderzoeksvraag luidt als volgt: Wanneer is EventSourcing een meerwaarde voor een
bedrijf zoals Skedify, waar ze gespecialiseerd zijn in online scheduling?
Hierbij worden ook volgende subvragen beantwoord:
• Wat is het verschil tussen een systeem met relationele databank modellen en een
systeem met EventSourcing?
• Hoe kan een applicatie die gebruik maakt van EventSourcing getest worden?
• Welke delen moeten er EventSourced worden, en hoe kan je deze delen bepalen?

1.3

Opzet van deze bachelorproef
De rest van deze bachelorproef is als volgt opgebouwd:
In Hoofdstuk 2 wordt de methodologie toegelicht en worden de gebruikte onderzoekstechnieken besproken om een antwoord te kunnen formuleren op de onderzoeksvragen.
In Hoofdstuk 6, tenslotte, wordt de conclusie gegeven en een antwoord geformuleerd op
de onderzoeksvragen. Daarbij wordt ook een aanzet gegeven voor toekomstig onderzoek
binnen dit domein.

2. Methodologie

2.1

Literatuurstudie

2.2

Proof of concept

3. Skedify

Skedify is een Gentse start up gespecialiseerd in het maken van afspraken. Deze bachelorproef gaat op zoek naar een antwoord of EventSourcing een meerwaarde kan bieden voor
Skedify. Skedify zorgt er voor dat een persoon in eender welke sector een afspraak kan
maken op zeer korte tijd voor eender welk probleem, en dit met de juiste contact persoon
van het bedrijf. Skedify is een business-to-business tool om dynamisch formulieren te gaan
opbouwen, in meerdere talen, voor verschillende onderwerpen. Op deze manier is de tool
heel dynamisch en kan ze dus voor heel veel doeleinden worden gebruikt. Alles wordt in
een relationele databank opgeslagen.
Een van de mogelijkheden die Skedify bied is het wijzigen van een afspraak, het kan
dus interessant zijn om te weten hoeveel keer dit gebeurt en of er specifieke maatregelen
kunnen genomen worden.

4. CQRS

CQRS is een term uitgevonden door Greg Young en is de opvolger van CQS. CQS betekend
Command Query Seperation en is een principe die uitgevonden is door Bertrand Meyer
(1988). Als er gekeken wordt naar CQS is dit al een eerste vorm van goede code schrijven.
CQS zorgt er voor dat getters en setters gescheiden zijn. Getters zijn strict bedoeld om een
waarde uit de huidige state te halen en deze terug te geven. Setters zijn bedoeld om een
wijziging te doen (of een algemene actie uit te voeren), setters geven geen waarde terug
maar void.
Het grootste probleem met CQS is dat developers acties uitvoeren in getters wat voor
bugs kan zorgen, bijvoorbeeld het huidige project is een spel en de totale score wordt
opgevraagd. Dan ziet de getter naam er als volgt uit getTotalScore, maar als deze getter
een andere methode oproept zoals calculateTotalScore, en deze methode wijzigt de state,
dan kan elke keer dat getTotalScore opgeroepen wordt het resultaat anders zijn.
Een tweede probleem is dat getters en setters in een en dezelfde klasse zijn gedefinieerd.
Er is geen stricte scheiding tussen de lees kant en de schrijf kant.
Dit is waar CQRS komt kijken, Command Query Responsibility Segregation. CQRS
zorgt er voor dat de lees kant en de schrijf kant strict gescheiden zijn. Het zijn bijna 2
applicaties die naast elkaar staan. Een command ligt aan de schrijfkant en een query aan de
leeskant. De leeskant gaat zijn informatie halen bij de databank (of een andere vorm van
opslagmechanisme), dit kan via sql queries, ORM tools, enzovoort. De manier waarop dit
gebeurt staat volledig los van hoe de schrijfkant communiceert met het opslagmechanisme.
Heel veel applicaties, onder andere ook die van Skedify zijn veel intensiever aan de leeskant
dan aan de schrijfkant. Vermits de lees- en schrijfkant nu strict gescheiden zijn kan er
gebruik gemaakt worden van schalingsmechanismen. Beter nog, de leeskant en schrijfkant

16

Hoofdstuk 4. CQRS

kunnen individueel geschaald worden.
CQRS speelt en grote rol bij EventSourcing, vandaar dit korte hoofdstuk.

5. EventSourcing

EventSourcing is geen nieuwe uitvinding, maar wordt al jaren gebruikt in andere sectoren.
Bekende voorbeelden zijn de bankindustrie, wetgeving, en patiënten fisches die opgeslagen
zijn bij dokters. EventSourcing, is zoals de naam al verklapt, dat events de bron zijn van
heel de applicatie. Als er naar de bankindustrie wordt gekeken dan is het bedrag op iemand
zijn rekening niet een getal dat opgeslagen is in een databank, of toch niet de enige vorm
hier van. Er is een lijst van transacties die tot dit getal komen. Het zal ook wel in een
databank opgeslagen zijn, maar dit is den puur een caching mechanisme.
Het is zo dat nu pas, de laatste jaren, EventSourcing opkomt in de informatica sector. In de
volgende hoofdstukken zal er dieper ingegaan worden op onderdelen van EventSourcing.

5.1

Aggregates

5.2

Domain Events
Domain events zijn een heel belangrijk onderdeel van EventSourcing. Domain events
zijn de effectieve events die zullen opgeslagen worden in een append-only database. Een
event is iets dat gebeurt is en nooit meer kan veranderen. Er zijn een paar heel belangrijke
eigenschappen aan deze events.
• Ze bevatten een unieke id, die op voorhand vastgelegd is. Dit kan een GUID
(Globally Unique Identifier) zijn.
• Ze bevatten enkel de data die gewijzigd is ten opzichte van de vorige versie.
• Alle data die ze bevatten, is correct en kan niet meer aangepast worden.

18

Hoofdstuk 5. EventSourcing

Domain events worden opgeslagen in een append-only database, maar wat als er een fout
gemaakt is gemaakt? Indien een fout is opgetreden, moet er een nieuw domain event
gemaakt worden, die het vorige event corrigeerd. Op deze manier blijft al je data correct,
en verlies je geen belangrijke informatie. Er is ook niet geprutst met de historiek van deze
events, wat heel belangrijk is.
Domain events hebben ook een naam, deze naam is heel specifiek in wat er gebeurt is. Het is
ook belangrijk dat deze naam in de verleden tijd is opgesteld. Een event is tenslotte gebeurd.
Als er in context van Skedify gesproken wordt, dan is AppointmentWasRescheduled een
goede naam voor een domain event. Het is ook belangrijk dat er geen CRUD (Create
Read Update Delete) events gemaakt worden zoals OfficeWasCreated, want we hebben
niet effectief een office gemaakt, we hebben er een toegevoegd. Een betere naam zou zijn
OfficeWasAdded.

5.3

Invariants
Invariants zijn regels die opgelegd zijn door de business. Invariants worden gecontroleerd
alvorens een domain event opgeslagen wordt. Elke invariant moet goedgekeurd, want eens
een domain event opgeslagen is, kan dit niet meer ongedaan gemaakt worden. Er kan wel
een nieuw domain event opgeslagen worden om deze wijziging te niet te doen. Invariant
controle wordt uitgevoerd, en telkens wanneer een input niet aan deze invariant voldoet
moet er een exception gegooid worden.
Wat zijn mogelijke invariants?

5.4

Eventual Consistency
Hi!

5.5

Audit Log
Hi!

5.6

Projections
Hi!

6. Conclusie

Lijst van figuren

Lijst van tabellen

